{"version":3,"sources":["components/TextMessage.js","components/AddTask.js","components/Button.js","components/BtnContainer.js","components/SingleTask.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["initialData","TextMessage","_ref","message","react_default","a","createElement","className","length","concat","AddTask","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","content","state","preventDefault","addTask","setState","handleChange","target","value","id","onSubmit","type","name","placeholder","onChange","minLength","Component","Button","_ref$styling","styling","_ref$text","text","_ref$type","event","form","_ref$disabled","disabled","react","onClick","BtnContainer","removeLastTask","clearList","disableBtns","SingleTask","item","index","removeItem","key","role","aria-label","List","tasks","map","App","task","toConsumableArray","uuid4","removeLast","slice","removeTask","taskToRemove","prevState","filter","components_TextMessage","AddTask_AddTask","listOfTasks","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0e9f13f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst initialData = {\r\n    default: `There are no tasks! Add something`,\r\n}\r\n\r\nconst TextMessage = ({ message }) => (\r\n    <p className=\"todo-app__text\"> {message.length ?\r\n        `You have ${message.length} tasks to complete`\r\n    : initialData.default}\r\n    </p>\r\n\r\n);\r\n\r\nexport default TextMessage;","import React, { Component } from 'react';\r\n\r\nexport default class AddTask extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            content: '',\r\n        }\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        const { content } = this.state;\r\n        e.preventDefault();\r\n        if(!content) {\r\n            this.props.addTask(`Task number `);\r\n        } else {\r\n            this.props.addTask(this.state.content);\r\n            this.setState({\r\n                content: ''\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                id=\"todo__form\"\r\n                className=\"add-task__form\"\r\n                onSubmit={this.handleSubmit}>\r\n                <input\r\n                    className=\"add-task__input\"\r\n                    type=\"text\"\r\n                    name=\"task\"\r\n                    placeholder=\"whats your next task?\"\r\n                    onChange={this.handleChange}\r\n                    value={this.state.content}\r\n                    minLength={3} />\r\n            </form>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nconst initialData = {\r\n    btnClass: 'btn',\r\n    text: 'Pass text to props',\r\n    type: 'button',\r\n    disabled: false,\r\n}\r\n\r\nexport default ({\r\n    styling = initialData.btnClass,\r\n    text = initialData.text,\r\n    type = initialData.type,\r\n    event,\r\n    form,\r\n    disabled = initialData.disabled\r\n}) => (\r\n        <button\r\n            type={type}\r\n            onClick={event}\r\n            className={styling}\r\n            form={form}\r\n            disabled={disabled}>\r\n            {text}\r\n        </button>\r\n    );","import * as React from \"react\";\r\nimport Button from './Button';\r\n\r\nexport default ({\r\n    removeLastTask,\r\n    clearList,\r\n    disableBtns\r\n}) => (\r\n    <section className=\"btn-container\">\r\n        <Button\r\n            text={'- Remove last task'}\r\n            event={removeLastTask}\r\n            disabled={disableBtns}\r\n        />\r\n\r\n        <Button\r\n            text={'Clear all'}\r\n            event={clearList}\r\n            disabled={disableBtns}\r\n        />\r\n    </section>\r\n);","import React from 'react';\r\n\r\nexport default ({ item, index, removeItem }) => (\r\n    <li\r\n    className=\"todo-app__list-element\"\r\n    key={item.id}>\r\n        <p> {item.text} {`${index+1}#`}</p>\r\n        <span\r\n            onClick={(e) => {\r\n                removeItem(item)\r\n            }}\r\n            className=\"list__element-close\"\r\n            role=\"img\"\r\n            aria-label=\"close\">&#10060;\r\n        </span>\r\n    </li>\r\n);","import React from 'react';\r\nimport SingleTask from './SingleTask';\r\n\r\n\r\nexport default ({\r\n    tasks,\r\n    event\r\n}) => (\r\n    <ul className=\"todo-app__list\">\r\n        {\r\n        tasks.map((item, index) =>\r\n            <SingleTask\r\n                index={index}\r\n                key={item.id}\r\n                item={item}\r\n                removeItem={event}\r\n            />)\r\n        }\r\n    </ul>\r\n);","import React, { Component } from 'react';\nimport './styles/styles.scss';\nimport uuid4 from 'uuid/v4';\n//components\nimport TextMessage from './components/TextMessage';\nimport AddTask from './components/AddTask';\nimport BtnContainer from './components/BtnContainer';\nimport List from './components/List';\nimport Button from './components/Button';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [{id: 1, text:'Barnabus Stinson!'}, {id: 2, text: 'Buy travel & tour guide book'}, {id: 3, text: 'Be awesome'}, {id: 4, text:'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.'}, { id: 5, text:'But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes,'}],\n    }\n  }\n\n  addTask = (task) => {\n    this.setState({\n      tasks: [\n        ...this.state.tasks,\n        { id: uuid4(),\n          text: task\n        }\n      ]\n    })\n  }\n  removeLast = () => {\n    const { tasks } = this.state;\n    this.setState({\n      tasks: tasks.slice(0, -1)\n    })\n  }\n\n  clearList = () => {\n    this.setState({\n      tasks: []\n    })\n  }\n\n  removeTask = (taskToRemove) => {\n    this.setState((prevState) => ({\n      tasks: prevState.tasks.filter(task => {\n\n        return taskToRemove !== task;\n      })\n    }))\n  }\n\n\n  handleChange = (e) => {\n    this.setState({\n      content: e.target.value\n    })\n  }\n\n\n  render() {\n    const { tasks } = this.state;\n    return (\n      <div className=\"todo-app\">\n        <article className=\"todo-app__container\">\n          <h1 className=\"todo-app__title\">Hey, Good Evening!</h1>\n            <TextMessage\n            message={tasks}/>\n          <section>\n            <AddTask\n              addTask={this.addTask}\n              listOfTasks={tasks.length}\n            />\n            <BtnContainer\n              removeLastTask={this.removeLast}\n              clearList={this.clearList}\n              disableBtns={tasks.length === 0 ? true : false}\n            />\n          </section>\n\n          <List\n            tasks={tasks}\n            event={this.removeTask}\n          />\n\n          <Button\n            styling={\"btn btn--add\"}\n            form={'todo__form'}\n            text={'+ Add task'}\n            type={'submit'}\n          />\n        </article>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}